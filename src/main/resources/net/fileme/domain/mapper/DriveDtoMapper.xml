<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.fileme.domain.mapper.DriveDtoMapper">

    <resultMap id="driveDto" type="net.fileme.domain.dto.DriveDto">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="data_name" jdbcType="VARCHAR" property="dataName"/>
        <result column="data_type" jdbcType="TINYINT" property="dataType"/>
        <result column="access_level" jdbcType="TINYINT" property="accessLevel"/>
        <result column="parent_id" jdbcType="BIGINT" property="parentId"/>
    </resultMap>

    <resultMap id="folderDto" type="net.fileme.domain.dto.DriveDto">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="data_name" jdbcType="VARCHAR" property="dataName"/>
    </resultMap>

    <resultMap id="parentId" type="long">
        <result column="parent_id" jdbcType="BIGINT"/>
    </resultMap>

    <!--  get All  -->

    <select id="getAll" resultMap="driveDto">
        select data_id id, data_name, data_type, access_level from v_user_drive
        where user_id = #{userId}
    </select>

    <select id="getAllFolders" resultMap="driveDto">
        select data_id id, data_name, data_type, access_level from v_user_drive
        where user_id = #{userId} and data_type = 0
    </select>

    <select id="getAllFiles" resultMap="driveDto">
        select data_id id, data_name, data_type, access_level from v_user_drive
        where user_id = #{userId} and data_type = 1
    </select>

    <!--  get Sub  -->

    <select id="getSub" resultMap="driveDto">
        select data_id id, data_name, data_type, access_level from v_user_drive
        where user_id = #{userId} and parent_id = #{folderId}
    </select>

    <select id="getSubIds" resultMap="driveDto">
        select data_id id, data_type from v_user_drive
        where user_id = #{userId} and parent_id = #{folderId}
    </select>

    <select id="getSubFolders" resultMap="driveDto">
        select data_id id, data_name, data_type, access_level from v_user_drive
        where user_id = #{userId} and parent_id = #{folderId} and data_type = 0
    </select>

    <select id="getSubFiles" resultMap="driveDto">
        select data_id id, data_name, data_type, access_level from v_user_drive
        where user_id = #{userId} and parent_id = #{folderId} and data_type = 1
    </select>

    <select id="getSubTree" resultMap="driveDto">
        with recursive cte as(
        select data_type, data_id id, data_name, parent_id, 0 as sort from v_user_drive
        where user_id = #{userId} and data_id = #{folderId} and data_type = 0
        union
        select v.data_type, v.data_id, v.data_name, v.parent_id, sort + 1
        from v_user_drive v
        join cte on cte.id = v.parent_id
        )
        select id, data_name, data_type from cte where id &lt;&gt; #{folderId}
    </select>

    <!--  get Super  -->

    <select id="getSuperFolderTree" resultMap="folderDto">
        with recursive cte as(
        select user_id, data_id id, data_name, parent_id, 0 as sort from v_user_drive
        where data_id = #{folderId} and user_id = #{userId}
        union
        select v.user_id, v.data_id, v.data_name, v.parent_id, sort + 1
        from v_user_drive v
        join cte on cte.parent_id = v.data_id
        )
        select id, data_name from cte where user_id = #{userId}
    </select>

    <!--  get One  -->

    <select id="getOneData" resultMap="driveDto">
        select data_id id, data_name, parent_id, access_level, data_type from v_user_drive
        where user_id = #{userId} and data_id = #{dataId}
    </select>

    <select id="getOneFolder" resultMap="driveDto">
        select data_id id, data_name, parent_id, access_level from v_user_drive
        where user_id = #{userId} and data_id = #{folderId} and data_type = 0
    </select>

    <select id="getOneFile" resultMap="driveDto">
        select data_id id, data_name, parent_id, access_level from v_user_drive
        where user_id = #{userId} and data_id = #{fileId} and data_type = 1
    </select>

    <!--  get Public  -->

    <select id="getPublicFile" resultMap="driveDto">
        select data_id id, data_name from v_user_drive
        where data_id = #{fileId} and data_type = 1 and access_level = 1
    </select>

    <select id="getPublicFolder" resultMap="driveDto">
        select data_id id, data_name from v_user_drive
        where data_id = #{folderId} and data_type = 0 and access_level = 1
    </select>

    <select id="getPublicSub" resultMap="driveDto">
        select data_id id, data_name, data_type, access_level from v_user_drive
        where parent_id = #{folderId} and access_level = 1
    </select>

    <!--  specific handling  -->

    <select id="getDistinctParent" resultMap="parentId">
        select distinct parent_id from v_user_drive
        where user_id = #{userId}
        and data_id in
        <foreach collection="dataIds" item="dataId" open="(" separator="," close=")">
            #{dataId}
        </foreach>
    </select>

    <select id="getConflictedTrash" resultMap="driveDto">
        select data_id id, data_name, data_type, parent_id from v_user_drive
        where user_id = #{userId}
        and parent_id = 999
        and(
        <if test="folders != null and !folders.isEmpty()">
            (data_type = 0 and data_name in
            <foreach collection="folders" item="folder" open="(" separator="," close=")">
                #{folder}
            </foreach>
            )
        </if>
        <if test="folders != null and !folders.isEmpty() and files != null and !files.isEmpty()">
            or
        </if>
        <if test="files != null and !files.isEmpty()">
            (data_type = 1 and data_name in
            <foreach collection="files" item="file" open="(" separator="," close=")">
                #{file}
            </foreach>
            )
        </if>
        )
    </select>

    <select id="search" resultMap="driveDto">
        select data_id id, data_name, data_type, access_level, parent_id from v_user_drive
        where user_id = #{userId}
        and(
        data_name like concat('%', #{param2}, '%') or
        data_name like concat('%', #{param3}, '%')
        )
        order by
            case
                when data_name like concat('%', #{param2}, '%') and data_name like concat('%', #{param3}, '%') then 1
                when data_name like concat('%', #{param2}, '%') then 2
                when data_name like concat('%', #{param3}, '%') then 3
                else 4
            end,
            locate(#{param2}, data_name),
            locate(#{param3}, data_name),
            data_name;
    </select>
</mapper>